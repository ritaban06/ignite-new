name: Build and Release TWA APK (Release)

on:
  workflow_dispatch: # Manual trigger

jobs:
  build-apk:
    runs-on: ubuntu-latest

    steps:
      # Checkout repo
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Set up JDK 17
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      # Install pnpm first
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      # Set up Node with caching (after pnpm is installed)
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      # Install workspace dependencies
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Install Android SDK
      - name: Install Android SDK packages
        uses: android-actions/setup-android@v3
        with:
          packages: 'build-tools;34.0.0 platform-tools'

      # Add Bubblewrap CLI to client workspace
      - name: Add Bubblewrap to client workspace
        run: |
          cd client
          pnpm add @bubblewrap/cli

      # Verify Bubblewrap installation
      - name: Verify Bubblewrap
        run: |
          cd client
          pnpm exec bubblewrap --version

      # Restore keystore from GitHub secrets
      - name: Restore keystore
        run: |
          cd client
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android.keystore

      # Initialize Bubblewrap from website manifest
      - name: Initialize TWA
        run: |
          cd client
          pnpm exec bubblewrap init --manifest=${{ secrets.WEBSITE_MANIFEST_URL }}

      # Build Release APK
      - name: Build Release APK
        run: |
          cd client
          pnpm exec bubblewrap build --release \
            --keystore-path ./android.keystore \
            --keystore-alias ${{ secrets.KEY_ALIAS }} \
            --keystore-password ${{ secrets.KEYSTORE_PASS }} \
            --key-password ${{ secrets.KEY_PASS }}

      # Find the generated APK
      - name: Find APK file
        run: |
          find client -name "*.apk" -type f
          APK_PATH=$(find client -name "app-release-signed.apk" -o -name "*-release-signed.apk" -type f | head -1)
          echo "Found APK at: $APK_PATH"
          echo "APK_PATH=$APK_PATH" >> $GITHUB_ENV

      # Verify APK exists
      - name: Verify APK
        run: |
          if [ -f "${{ env.APK_PATH }}" ]; then
            ls -la "${{ env.APK_PATH }}"
          else
            echo "APK not found at expected location"
            find . -name "*.apk" -type f
            exit 1
          fi

      # Upload APK to the Release
      - name: Upload APK to Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v1.0.${{ github.run_number }}
          name: Release v1.0.${{ github.run_number }}
          files: ${{ env.APK_PATH }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}